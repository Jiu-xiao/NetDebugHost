name: Build NetDebugHost .deb Packages

on:
  push:
    branches: [ master ]
  pull_request:

env:
  VERSION: "1.0.0"

jobs:
  build-deb:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    name: Build for ${{ matrix.arch }}

    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build in Docker (${{ matrix.arch }})
        run: |
          docker run --rm --platform=linux/${{ matrix.arch }} \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ubuntu:22.04 bash -c '
              set -eux

              echo "==> 1. 安装依赖"
              apt update
              DEBIAN_FRONTEND=noninteractive apt install -y \
                build-essential cmake ninja-build \
                libudev-dev libnm-dev libwpa-client-dev \
                python3-pip git curl zip unzip \
                pkg-config libeigen3-dev

              echo "==> 2. 安装 xrobot 并初始化模块"
              pip install --upgrade pip
              pip install xrobot
              xrobot_setup

              echo "==> 3. 克隆 libxr（如果未作为子模块）"
              [ -d libxr ] || git clone https://github.com/Jiu-xiao/libxr.git

              echo "==> 4. 编译项目"
              mkdir -p build
              cd build
              cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release
              ninja NetDebugHost
              cd ..

              echo "==> 5. 打包 .deb"
              VERSION=${{ env.VERSION }} ARCH=${{ matrix.arch }} ./build_deb.sh

              echo "==> 6. 检查生成包"
              ls -lh NetDebugHost_*.deb
            '

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: netdebughost-${{ matrix.arch }}
          path: NetDebugHost_*.deb
